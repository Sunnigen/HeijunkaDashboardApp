@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Timeline";
}
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule

<div>
    @Html.EJS().Toolbar("menuToolbar").Clicked("toolbarClicked").Items(ViewBag.MenuToolItems).Render()
</div>

<div class="control-section">
    <div class="content-wrapper">

        <div class="event-container">
            <div class="title-container">
                <h2 class="title-text">Info/Events</h2>
            </div>
            <label id="queue-count-label">There are @ViewBag.Owners.Count Queues at the moment</label>
        </div>
        
        <div class="schedule-container">
            <div class="title-container">
                <h2 class="title-text">Digital Heijunka</h2>
            </div>
                        
           <!--field="QueueId" title="Owners" name="Owners" textField="Text" idField="Id" colorField="Color" -->
            @(Html.EJS().Schedule("schedule")
             .Width("100%")
             .Height("700px")
             .Group(group => group.Resources(ViewBag.Resources))
             .Resources(res => {res.DataSource(ViewBag.Owners)
                 .Field("QueueId")
                 .Title("Owners")
                 .Name("Owners")
                 .TextField("QueueName")
                 .IdField("Id")
                 .ColorField("Color")
                 .Add();
             })
             .Views(view => {view
                .Option(View.TimelineDay)
                .AllowVirtualScrolling(true)
                .Add();
             })
             .TimeScale(ts => ts
                .Enable(true)
                .Interval(60)
                .SlotCount(6)
             )
             //.SelectedDate(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
             //.HeaderRows(headerRow => headerRow.Option(HeaderRowType.Hour).Add())
             .EventSettings(e => e.DataSource(
                 d => d
                    .Url("Heijunka/GetScheduleData")
                    .CrudUrl("Heijunka/UpdateScheduleData")
                    .Adaptor("UrlAdaptor")
                    .CrossDomain(true)
                 )
                 .EnableTooltip(true)
             )
             .AllowDragAndDrop(false)
             .AllowResizing(false)
             .ActionBegin("onActionBegin")
             .Drag("OnItemDrag")
             .EventRendered("onEventRendered") 
             .PopupOpen("onPopupOpen")
             .PopupClose("onPopupClose")
             .EditorTemplate("#EventEditorTemplate") 
             .ShowQuickInfo(false)
             .Render()
            )
            <!-- <ejs-button id="listAppoints" onclick="listAllActiveProcess()" content="Appointment Data"></ejs-button> -->
            <ejs-button id="addStagingButton" onclick="addStaging()" content="Stage Process"></ejs-button>
        </div>
        <!-- Staging Area for Parts to Process -->
        <div class="treeview-container">
            <div class="title-container">
                <h2 class="title-text">Staging Area</h2>
            </div>
            <!-- Actual TreeView Widget-->
            @(Html.EJS().TreeView("tree")
                .Fields(Fields => Fields.DataSource(ViewBag.DataSource)
                    .Id("Id")
                    .Text("Name")
                    .Text("OrderNumber")
                    .Selected("is_selected")
                    .HtmlAttributes("hasAttribute")
                )
                .AllowEditing(true)
                .AllowDragAndDrop(true)
                .NodeClicked("nodeClicked")
                .NodeDragStop("OnTreeDragStop")
                .NodeDragging("OnItemDrag")
                .NodeTemplate("#treeTemplate")
                .DragArea(".content-wrapper")
                .CssClass("treeview-external-drag")
                .Render()
            )

            <!-- Contextual Menu for Staging Area-->
            @(Html.EJS().ContextMenu("menu")
                .Target("#tree")
                .Select("menuClick")
                .BeforeOpen("beforeOpen")
                .Items(ViewBag.menuOptions)
                .Render()
            )

            <!-- Contextual Menu for Queues-->
            @(Html.EJS().ContextMenu("schedulerMenu")
                .Target("#schedule")
                .Select("confirmSchedulerSelection")
                .BeforeOpen("onSchedulerRightClick")
                .Render()
            )
        </div>

        <!-- Sidebar -->
        @{Html.EJS().Sidebar("menuSidebar").Width("145px").Target(".content-wrapper").EnableDock(false).IsOpen(false).ContentTemplate(@<div>
            <div class="main-menu">
                <div>
                    @Html.EJS().Menu("dockMenu").Orientation(Syncfusion.EJ2.Navigations.Orientation.Vertical).CssClass("dock-menu").Items(ViewBag.Items).Render()
                </div>
            </div>
        </div>)
        .HtmlAttributes(ViewBag.HtmlAttribute).Render();}

    </div>
</div>

<!-- Popup to Add New Queues/Appointments -->
<div id="schedulerPopupContainer">
    @(Html.EJS().Dialog("schedulerDialog")
        .Target("#schedulerPopupContainer")
        .Height("250px")
        .Width("350px")
        .Header("Add New Queue")
        .ContentTemplate(@<div> <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr>
                    <td class="e-textlabel">Queue Title:</td>
                    <td colspan="4">
                        <input id="QueueName" class="e-field e-input" type="text" name="QueueName" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Description:</td>
                    <td colspan="4">
                        <input id="QueueDescription" class="e-field e-input" type="text" name="QueueDescription" style="width: 100%" />
                    </td>
                </tr>
            </tbody>
        </table>
        </div>)
        .AllowDragging(true)
        .Visible(false)
        .IsModal(true)
        .ShowCloseIcon(true)
        .AnimationSettings(e => e.Effect(Syncfusion.EJ2.Popups.DialogEffect.Zoom).Duration(400).Delay(0))
        .Buttons(btn => {
            btn.Click("insertQueueConfirm").ButtonModel(ViewBag.DialogButton1).Add();
            btn.Click("schedulerDialogClose").ButtonModel(ViewBag.DialogButton2).Add();
        })
        .Render()
    )
</div>

<!-- Popup to Modify Existing Queues-->
<div id="schedulerPopupContainer">
    @(Html.EJS().Dialog("modifyQueueDialog")
        .Target("#schedulerPopupContainer")
        .Height("250px")
        .Width("350px")
        .Header("Modify Existing Queue")
        .ContentTemplate(@<div> <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr>
                    <td class="e-textlabel">Queue Title:</td>
                    <td colspan="4">
                        <input id="ModifyQueueName" class="e-field e-input" type="text" name="ModifyQueueName" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Description:</td>
                    <td colspan="4">
                        <input id="ModifyQueueDescription" class="e-field e-input" type="text" name="ModifyQueueDescription" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class='lSize'><label for='ModifyQueueSwitch'>Display this Queue?</label></td>
                    <td>
                        @(Html.EJS().Switch("ModifyQueueSwitch")
                            .OnLabel("Turn On?")
                            .Checked(true)
                            .Render()
                        )
                    </td>
                </tr>
            </tbody>
        </table>
        </div>)
        .AllowDragging(true)
        .Visible(false)
        .IsModal(true)
        .ShowCloseIcon(true)
        .AnimationSettings(e => e.Effect(Syncfusion.EJ2.Popups.DialogEffect.Zoom).Duration(400).Delay(0))
        .Buttons(btn => {
            btn.Click("modifyQueueConfirm").ButtonModel(ViewBag.DialogButton3).Add();
            btn.Click("modifyQueueDialogClose").ButtonModel(ViewBag.DialogButton2).Add();
        })
        .Render()
    )
</div>

<!-- Template to render tree node -->
<script id="treeTemplate" type="text/x-template">
    <div id="waiting">
        <div id="waitdetails">
            <div id="waitlist">${Name}</div>
            <div id="ordernumber">
                <label>Order Number:&ensp;</label>
                <label> ${OrderNumber}</label>
            </div>
        </div>
    </div>
</script>


<script id="EventEditorTemplate" type="text/x-template">
    <form id="form-element">
        <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr>
                    <td class="e-textlabel">Part</td>
                    <td colspan="4">
                        <input id="Subject" class="e-field e-input" type="text" name="Subject" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Order Number</td>
                    <td colspan="4">
                        <input id="OrderNumber" class="e-field e-input" type="number" name="OrderNumber" style="width: 100%" />
                    </td>
                </tr>

                <tr>
                    <td class="e-textlabel">Queue</td>
                    <td colspan="4">
                        <input id="QueueId" class="e-field e-input" name="QueueId" type="text" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">From</td>
                    <td colspan="4">
                        <input id="StartTime" class="e-field" type="text" name="StartTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">To</td>
                    <td colspan="4">
                        <input id="EndTime" readonly class="e-field e-input" type="text" name="EndTime" />
                    </td>
                </tr>
            </tbody>
        </table>
    </form>
</script>

<script type="text/javascript">

    var isTreeItemDropped = false;
    var draggedItemId = '';
    var index = 1;
    var rightClickResource = null;
    var rightClickCellData = null;
    var rightClickAppointmentId = null;

    function nodeClicked(args) {
        //if (args.event.which === 3) {
        //    var treeObj = document.getElementById('tree').ej2_instances[0];
        //    treeObj.selectedNodes = [args.node.getAttribute('data-uid')];
        //}
    }

    function menuClick(args) {
        var treeObj = document.getElementById('tree').ej2_instances[0];
        var menuObj = document.getElementById('menu').ej2_instances[0];
        var targetNodeId = treeObj.selectedNodes[0];
        if (args.item.text == "Stage Part") {
            var nodeId = "tree_" + index; // i don't know what this is supposed to be used for
            // TODO: Add 2nd Menu to Select Part and Add Order Number
            var item = { Id: treeObj.fields.dataSource.length+ 1, Name: "Aileron", OrderNumber: "34211231"  };
            treeObj.addNodes([item], null);
            index++;
            treeObj.fields.dataSource.push(item);
            treeObj.refresh();
            //treeObj.beginEdit(nodeId);
        }
        else if (args.item.text == "Remove Part") {
            treeObj.removeNodes([targetNodeId]);
            console.log(`targetNodeId: ${targetNodeId}   ${treeObj.fields.dataSource[targetNodeId - 1]}`);
            var removed = treeObj.fields.dataSource.splice(targetNodeId - 1, 1);
            console.log(treeObj.fields.dataSource);
        }
        else if (args.item.text == "Rename Part") {
            treeObj.beginEdit(targetNodeId);
        }
    }

    function beforeOpen(args) {
        var treeObj = document.getElementById('tree').ej2_instances[0];
        var menuObj = document.getElementById('menu').ej2_instances[0];
        var targetNodeId = treeObj.selectedNodes[0];

        // Check if anything is even selected
        if (targetNodeId == null) {
            return;
        }

        var targetNode = document.getElementById('tree').querySelector('[data-uid="' + targetNodeId + '"]');
        if (targetNode.classList.contains('remove')) {
            menuObj.enableItems(['Remove Part'], false);
        }
        else {
            menuObj.enableItems(['Remove Part'], true);
        }
    }

    function OnItemDrag(event) {
        var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
        if (scheduleObj.isAdaptive) {
            var classElement = scheduleObj.element.querySelector('.e-device-hover');
            if (classElement) {
                classElement.classList.remove('e-device-hover');
            }
            if (event.event.target.classList.contains('e-work-cells')) {
                ej.base.addClass([event.event.target], 'e-device-hover');
            }
        }
        //document.body.style.position = 'fixed';   // this might cause problems later, right now it creates an empty column on right of entire page
        if (document.body.style.cursor === 'not-allowed') {
            document.body.style.cursor = '';
        }
        if (event.name == 'nodeDragging') {
            var dragElementIcon = document.querySelectorAll('.e-drag-item .e-icon-expandable');
            for (var i = 0; i < dragElementIcon.length; i++) {
                dragElementIcon[i].style.display = 'none';
            }
        }
    }

    function onActionBegin(event) {
        if (event.requestType === 'eventCreate' && isTreeItemDropped) {
            var treeObj = document.querySelector(".e-treeview.treeview-external-drag").ej2_instances[0];
            var treeViewdata = treeObj.fields.dataSource;
            var filteredPeople = treeViewdata.filter(function (item) { return item.Id !== parseInt(draggedItemId, 10); });
            treeObj.fields.dataSource = filteredPeople;
            var elements = document.querySelectorAll('.e-drag-item.treeview-external-drag');
            for (var i = 0; i < elements.length; i++) {
                remove(elements[i]);
            }
        }
    }

    function OnTreeDragStop(event) {
        var treeElement = ej.base.closest(event.target, '.e-treeview');
        var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
        var classElement = scheduleObj.element.querySelector('.e-device-hover');
        if (classElement) {
            classElement.classList.remove('e-device-hover');
        }
        if (!treeElement) {
            event.cancel = true;
            var scheduleElement = ej.base.closest(event.target, '.e-content-wrap');
            if (scheduleElement) {
                var treeviewData = this.fields.dataSource;
                if (event.target.classList.contains('e-work-cells')) {
                    var filteredData =
                        treeviewData.filter(function (item) { return item.Id === parseInt(event.draggedNodeData.id, 10); });
                    var cellData = scheduleObj.getCellDetails(event.target);
                    var resourceDetails = scheduleObj.getResourcesByIndex(cellData.groupIndex);
                    var eventData = {
                        Name: filteredData[0].Name,
                        OrderNumber: filteredData[0].OrderNumber,
                        StartTime: cellData.startTime,
                        EndTime: updateDate(cellData.startTime, filteredData[0].Name),
                        QueueId: resourceDetails.resourceData.Id,
                        Id:resourceDetails.resourceData.Id
                    };
                    //scheduleObj.openEditor(eventData, 'Save');
                    isTreeItemDropped = true;
                    draggedItemId = event.draggedNodeData.id;
                    scheduleProcess(eventData);
                }
            }
        }
    }

    function scheduleProcess(args) {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var scheduleEventsData = scheduleObj.eventsData;
        var newProcess = {
            Id: scheduleEventsData.length + 1, 
            QueueId: args.QueueId, 
            Subject: args.Name, 
            OrderNumber: args.OrderNumber,
            StartTime: args.StartTime, 
            EndTime: args.EndTime
        }
        //console.log(`scheduleProcess\n\tId: ${newProcess.Id}, QueueId: ${newProcess.QueueId}, Subject: ${newProcess.Subject}, StartTime: ${newProcess.StartTime}, EndTime: ${newProcess.EndTime}`);
        scheduleObj.addEvent(newProcess);
        //var newProcess = {Id: scheduleEventsData.length + 1, QueueId: scheduleResources.length, Subject: "Drilling (120) fasteners", StartTime: startDate, EndTime: endDate}
    }

    function onEventRendered(args) { 
        var scheduleObj = document.querySelector('.e-schedule').ej2_instances[0];
        if (args.data.EndTime < scheduleObj.selectedDate) {
            args.element.classList.add('e-past-app');
        }

        let cellHeight = (scheduleObj.element.querySelector('.e-work-cells')).offsetHeight;
        args.element.style.height = (cellHeight/3) + 'px';
        const top = parseInt(args.element.style.top.substring(0, args.element.style.top.length - 2)) + cellHeight/3;
        args.element.style.top = top + 'px';
    }

    function updateDate(startDateString, partNameString) {
        //console.log(`updateDate: startDateString:  ${startDateString}  partNameString: ${partNameString}`);

        // Find PartModel and Obtain Duration
        var partsList = @Json.Serialize(ViewBag.Parts);
        //console.log(partsList);
        var duration = 0;
        for (const p of partsList) {
            //console.log(` ${p.Id} ${p.Name} ${p.Duration} ${p}`);
            if (p.Name === partNameString) {
                duration = p.Duration;
                //console.log(`Scheduling part name: ${p.Name}  duration: ${p.Duration}`);
                break;
            }
        }

        // Set End Date based on Start Date + Duration
        var startDate = new Date(startDateString);
        startDate = new Date(startDate.getTime() + duration*60000);
        var year = startDate.getFullYear();
        var month = startDate.getMonth() + 1;
        var date = startDate.getDate();
        var hours = startDate.getHours();
        var minutes = startDate.getMinutes();
        
        // Format Date MM:DD:YYYY HH:MM
        var ampm = hours >= 12 ? "PM" : "AM";

        hours = hours % 12;
        hours = hours ? hours : 12;
        minutes = minutes < 10 ? '0' + minutes : minutes;

        var date = `${month}/${date}/${year} ${hours}:${minutes} ${ampm}`;
        //console.log(`date: ${date}`);
        return date;
    }

    var formObject = null;
    var formObject2 = null;

    function onPopupClose(args) {
        resetRightClickData();

        // Check if Save Button was Clicked
        var buttonType = args.event.target.innerHTML;
        //console.log("Form Validations:");
        //console.log(!formObject.validate());
        //console.log(!formObject2.validate());
        if ((!formObject.validate() || !formObject2.validate()) && buttonType === "Save") {
            console.log("Preventing popup close.");
            args.cancel = true;
        } else {
            // Allow Form to Properly Close
            // formObject = null;
        }
    }

    function onPopupOpen(args, eventData) {
        //console.log("onPopupOpen");
        //console.log(args, eventData);
        if (args.type === 'Editor')
        {
            formObject = null;
            formObject2 = null;
            var processElement = args.element.querySelector('#Subject');

            // Order Number
            var orderElement = args.element.querySelector('#OrderNumber');
            orderElement.value = args.data.OrderNumber;

            // Start Time
            var startElement = args.element.querySelector('#StartTime');
            if (!startElement.classList.contains('e-datetimepicker')) {
                new ej.calendars.DateTimePicker({ 
                    value: new Date(args.data.StartDate), 
                    min: Date(args.data.StartDate),
                    change: () => { endElement.value = updateDate(args.data.StartDate, processElement.value); }}, startElement);
            }

            // End Time
            var endElement = args.element.querySelector('#EndTime');
            endElement.value = updateDate(args.data.StartDate, processElement.value);


            // Get Parts List Only

            // Drop List to Select Existing Part to Process
            var partsListNames = @Json.Serialize(ViewBag.Partnames);
            if (!processElement.classList.contains('e-dropdownlist'))
            {
                var dropDownListObject = new ej.dropdowns.DropDownList({
                    placeholder: "Schedule a part:",
                    // dataSource: ['Aileron', 'Wing Skin', 'Hinge Flap', 'Rib Bracket', 'Winglet'],
                    dataSource: partsListNames,
                    value: args.data.Subject,
                    change: () => { endElement.value = updateDate(startElement.value, processElement.value); }
                })
                dropDownListObject.appendTo(processElement);
                processElement.setAttribute('name', 'Subject');
            }

            // Drop List to Select Queue/Owner
            var queueElement = args.element.querySelector('#QueueId');
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var scheduleObjResource = scheduleObj.resources[0].dataSource;

            // If there is no target, keep Queue Default Value Blank
            var val = null
            if (args.target){
                if (!queueElement.classList.contains('e-dropdownlist')){
                var dropDownListObject = new ej.dropdowns.DropDownList({
                    placeholder: "Select a queue:",
                    dataSource: scheduleObjResource,
                    fields: {text: 'QueueName', value: 'Id'},
                    value: args.data.QueueId
                })
                dropDownListObject.appendTo(queueElement);
                queueElement.setAttribute('name', 'QueueId');
                }
            } else {
                if (!queueElement.classList.contains('e-dropdownlist')){
                var dropDownListObject = new ej.dropdowns.DropDownList({
                    placeholder: "Select a queue:",
                    dataSource: scheduleObjResource,
                    fields: {text: 'QueueName', value: 'Id'},
                    value: ""
                })
                dropDownListObject.appendTo(queueElement);
                queueElement.setAttribute('name', 'QueueId');
                }
            }
            
            

            console.log(args.data.Subject, args.data.QueueId);


             // Order Number & Part Selected Validation
            var options = {
                rules: {
                    // name attribute: validating rule
                    'Subject': {required: true},
                    'QueueId': {required: true},

                },
            
                customPlacement: (inputElement, errorElement) => {
                    /* to place the error message in custom position
                    *  inputElement - target element where the error text will be appended
                    *  errorElement - error text which will be displayed
                    */ 
                    inputElement.parentElement.parentElement.appendChild(errorElement);
                }
            }
            formObject = new ej.inputs.FormValidator("#form-element", options);


            var options = {
                rules: {
                    // name attribute: validating rule
                    'OrderNumber': {required: true, maxLength: 11, minLength: 6},

                }
            }
            formObject2 = new ej.inputs.FormValidator("#form-element", options);


        }
    }

    function listAllActiveProcess() {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var scheduleEventsData = scheduleObj.eventsData;   // current appointments in place

        for (const d of scheduleEventsData){
            console.log(d);
        }
    }

    function removeQueue() {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var scheduleResources = scheduleObj.resources[0].dataSource;

        if (scheduleResources.length > 0) {
            scheduleObj.removeResource(scheduleResources.length + 1,'Owners');
            scheduleResources.pop();
            var label = document.getElementById('queue-count-label');
            label.innerHTML = `There are ${scheduleResources.length} Queues at the moment!`;
        }
    }

    function addQueuetoScheduler(collection) {

        // Add Queue to Scheduler and Update Scheduler Queues
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var scheduleResources = scheduleObj.resources[0].dataSource;
        scheduleObj.addResource(collection,'Owners', scheduleResources.length + 1);
        scheduleResources.push(collection);
        
        // Update Event Panel
        var label = document.getElementById('queue-count-label');
        label.innerHTML = `There are ${scheduleResources.length} Queues at the moment!`;

    }

    function addAppointment() {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var scheduleResources = scheduleObj.resources[0].dataSource;  // current queues in place



        var scheduleEventsData = scheduleObj.eventsData;   // current appointments in place


        var startDate = new Date();

        var endDate = new Date();
        endDate.setHours(endDate.getHours() + 3);


        var newProcess = {Id: scheduleEventsData.length + 1, QueueId: scheduleResources.length, Subject: "Drilling (120) fasteners", StartTime: startDate, EndTime: endDate}
        //scheduleObj.openEditor(newProcess, 'Add', true);

        scheduleObj.addEvent(newProcess);
    

        //scheduleEventsData.push(newProcess);
        //scheduleObj.refreshLayout();
    }

    function addStaging() {
        var treeView = document.getElementById('tree').ej2_instances[0];

        var content = {
            Id: treeView.fields.dataSource.length+ 1,
            Name: "Shear Web",
            OrderNumber: "321421442"
        }

        //treeView.addNodes(content);
        treeView.fields.dataSource.push(content);
        treeView.refresh();
        //console.log(treeView.fields.dataSource);


    }

    // Generate a random string with the format "X000000"
    function GetRandomColor() { return "#" + Math.floor(Math.random()*16777215).toString(16); }

    function GetQueues() {
        var ajax = new ej.base.Ajax('/Heijunka/GetQueues', 'Get', false);
        ajax.send().then(
            function (value) {
                var scheduleObj = document.getElementById('schedule').ej2_instances[0];
                //var scheduleResources = scheduleObj.resources[0].dataSource;

                // Correct Format
                var data = JSON.parse(value);

                for (const d of data) {
                    d["Color"] = GetRandomColor();
                }

                // Load Active Queues
                scheduleObj.resources[0].dataSource = data;
            }
        )
    }

    function schedulerDialogPopup(positionData, data) {

        if (data) {
            var dialog = document.getElementById("modifyQueueDialog").ej2_instances[0];

            // Open Dialog to Create/Modify Queue
            dialog.header = `Modify ${data.QueueName}`;
            var queueName = document.getElementById("ModifyQueueName");
            var queueDescription = document.getElementById("ModifyQueueDescription");
            var queueSwitch = document.getElementById("ModifyQueueSwitch").ej2_instances[0];
            queueName.value = data.QueueName;
            queueDescription.value = data.QueueDescription;
            queueSwitch.checked = true;
            queueSwitch.properties.checked = true;
            dialog.QueueId = data.QueueId;
        } else {
            // New Queue Dialog
            var dialog = document.getElementById("schedulerDialog").ej2_instances[0];
        }
        dialog.position = positionData;  // save position from original mouse click event
        dialog.show();
    }

    function modifyQueueDialogClose(args) {
        // Close Dialog to Modify Queue
        var dialog = document.getElementById("modifyQueueDialog").ej2_instances[0];
        dialog.hide();
        resetRightClickData();
    }

    function schedulerDialogClose() {
        // Close Dialog to Create/Modify Queue/Appointment
        var dialog = document.getElementById("schedulerDialog").ej2_instances[0];
        dialog.hide();
        resetRightClickData();
    }

    function confirmSchedulerSelection(args) {
        //console.log("confirmSchedulerSelection");
        //console.log(args);
        scheduleObj = scheduleObj = document.getElementById('schedule').ej2_instances[0];

        var selection = args.item.properties.text;
        var positionData = {X: args.event.pageX - 125, Y: args.event.pageY - 75};

        //console.log(`Selection: ${selection}`);
        //console.log("rightClickResource:");
        //console.log(rightClickResource);
        //console.log("rightClickCellData:");
        //console.log(rightClickCellData);

        if (selection === "Schedule New Part") {
            // console.log("Schedule New Part");
            var eventData = {
                startTime: rightClickCellData.startTime,
                queueId: rightClickResource.resourceData.Id,
                endTime: rightClickCellData.startTime,
            }
            scheduleObj.openEditor(eventData, "Add");
        } else if (selection === "Modify Part") {
            // console.log("Modify Part");
            //scheduleObj.modifyEventDialog(positionData);
            resetRightClickData();
        } else if (selection === "Delete Part") {
            // console.log("Delete Part");
            const data = parseInt(rightClickAppointmentId);
            scheduleObj.deleteEvent(data);
        } else if (selection === "Add New Queue") {
            // console.log("Add New Queue");
            insertQueueDialog(positionData);
        } else if (selection === "Modify Queue") {
            // console.log("Modify Queue");
            modifyQueueDialog(positionData);
        } else {
            resetRightClickData();
        }
    }

    function resetRightClickData() {
        rightClickAppointmentId = null;
        rightClickCellData = null;
        rightClickResource = null;
        
    }

    function onSchedulerRightClick(args) {
        // Before Popup Open, Define which Menu Items should Exist
        console.log("onSchedulerRightClick | cellData");
        var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
        var schedulerMenu = document.getElementById("schedulerMenu").ej2_instances[0];
        var cellData = scheduleObj.getCellDetails(args.event.target);
        var items = @Json.Serialize(ViewBag.menuItems);

        // No CellData if an Appointment is Targetted
        if (!cellData) {
            var uiType = args.event.target.className;

            // Appointment is Selected
            if (uiType === "e-time" || uiType === "e-subject") {
                items.splice(0, 1);
                const arr = args.event.srcElement.offsetParent.dataset.id.split("_");
                var idAppointment = arr[1];
                rightClickAppointmentId = idAppointment;
                var groupIndex = event.srcElement.offsetParent.dataset.groupIndex;
                var resourceDetails = scheduleObj.getResourcesByIndex(groupIndex);
                cellData = {groupIndex: groupIndex, labelElement: event.path[9].children[0].children[0].children[0].children[0].children[0].children[0].children[groupIndex]};

            } else {
                // Queue Row Left Column is Selected
                items.splice(0, 3);
                // Group Index appears depending on which object within Queue Column is Selected
                var groupIndex = event.srcElement.offsetParent.dataset.groupIndex;
                if (!groupIndex) {
                    groupIndex = event.srcElement.dataset.groupIndex;
                }
                
                var resourceDetails = scheduleObj.getResourcesByIndex(groupIndex);
                cellData = {groupIndex: groupIndex, labelElement: event.srcElement};
            }
            
        } else {
            var items = @Json.Serialize(ViewBag.menuItems);
            items.splice(1, 2);
            var resourceDetails = scheduleObj.getResourcesByIndex(cellData.groupIndex);
            console.log(event.path[6].children[0].children[0].children[0].children[0]);
            cellData["labelElement"] = event.path[6].children[0].children[0].children[0].children[0].children[cellData.groupIndex];
        }
        schedulerMenu.items = items;

        rightClickCellData = cellData;
        rightClickResource = resourceDetails;
        console.log(rightClickCellData);
        console.log(rightClickResource);
    }

    function modifyQueueDialog(positionData) {
        // Edit or Turn Off Queue
        console.log("modifyQueueDialog");
        console.log(rightClickResource);
        var data = {
            QueueId: rightClickResource.resourceData.Id,
            QueueName: rightClickResource.resourceData.QueueName,
            QueueDescription: rightClickResource.resourceData.Description,
            SlotNumber: rightClickResource.groupData.QueueId
        }

        schedulerDialogPopup(positionData, data);
    }

    function modifyQueueConfirm(args) {
        var dialog = document.getElementById("modifyQueueDialog").ej2_instances[0];

        var queueName = document.getElementById("ModifyQueueName");
        var queueDescription = document.getElementById("ModifyQueueDescription");

        var queueSwitch = document.getElementById("ModifyQueueSwitch").ej2_instances[0];
        var queueId = dialog.QueueId;
        var queueData = {QueueName: queueName.value, QueueDescription: queueDescription.value, IsActive: queueSwitch.properties.checked, QueueId: dialog.QueueId };
        modifyQueue(queueData);
    }

    function modifyQueue(queueData) {
        collection = {QueueName: queueData.QueueName, Description: queueData.QueueDescription, IsActive: queueData.IsActive, Id: queueData.QueueId};
        var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
        var scheduleResources = scheduleObj.resources[0].dataSource;
        var groupIndex = rightClickCellData.groupIndex;

       // Check If Existing Queue 

       var ajax = new ej.base.Ajax({
           url: '/Heijunka/ModifyQueue',
           data: JSON.stringify(collection),
           type: "POST",
           contentType: 'application/json'
       });

       ajax.send().then(
           function (value) {
               value = JSON.parse(value);
               
               // Add Queue to Scheduler and Update Scheduler Queue
               if (!value.IsActive) {
                   scheduleObj.removeResource(value.Id, 'Owners'); // remove from UI 
                   scheduleResources.splice(groupIndex, 1);  // remove from data
               } else {
                   var r = scheduleResources[rightClickCellData.groupIndex];

                   r.QueueName = value.QueueName;
                   r.Description = value.Description;
                   rightClickCellData.labelElement.innerText = value.QueueName;
               }

               modifyQueueDialogClose();
           }
       )
    }
    
    function insertQueueDialog(positionData) {
        schedulerDialogPopup(positionData);
    }

    function insertQueueConfirm(args) {

        var queueName = document.getElementById("QueueName").value;
        var queueDescription = document.getElementById("QueueDescription").value;
        var queueData = {QueueName: queueName, QueueDescription: queueDescription};

        insertQueue(queueData);

    }
    
    function insertQueue(queueData) {
        collection = {QueueName: queueData.QueueName, Description: queueData.QueueDescription};
        console.log(collection);
        var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
        var scheduleResources = scheduleObj.resources[0].dataSource;

        // Check if Existing Queue

        // Insert New Queue
        var ajax = new ej.base.Ajax({
            url: '/Heijunka/InsertQueue',
            data: JSON.stringify(collection),
            type: "POST",
            contentType: 'application/json'
        });

        ajax.send().then(
            function (value) {
                value = JSON.parse(value);
                addQueuetoScheduler(value);
                schedulerDialogClose();
            }
        )
    }

    function printtoConsole() {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var treeView = document.getElementById('tree').ej2_instances[0];
        var scheduleResources = scheduleObj.resources[0].dataSource;
        var scheduleEventsData = scheduleObj.eventsData;
        console.log(scheduleObj);
        console.log(treeView);
        console.log(scheduleEventsData);
        console.log(scheduleResources);
        //var complexObject = {
        //    Id: 1,
        //    Text: 'Hello World!',
        //    Color: 'Red'
        //};

        //$.ajax({
        //    type: "POST",
        //    url: "Heijunka/TestFunction1",
        //    data: complexObject,
        //    contentType: "application/json; charset=utf-8",
        //    dataType: "json",
        //    success: function (arg) {
        //      alert(arg);
        //      console.log(arg);
        //    },
        //    error: function (xhr) {
        //        alert("ERROR!!");
        //        alert(xhr);
        //    }
        //});
    };

    document.addEventListener('DOMContentLoaded', function () {
        sidebarObj = document.getElementById("menuSidebar").ej2_instances[0];
    });

    function toolbarClicked(args) {
        if (args.item.tooltipText == "Menu") {
            sidebarObj.toggle();
        }
    }
</script>

<style>
    .content-wrapper{
        display:-ms-flexbox;
        display:flex;
    }
    .e-device-hover {
        background-color: #e0e0e0 !important;
    }

    .schedule-container {
        padding-right: 10px;
        width: 100%;
    }
        
    .e-location-container{
        float: right;
    }
    .title-container {
        padding-bottom: 10px;
    }

    .title-text {
        font-size: 18px;
        margin: 0px;
        font-weight: bold;
        text-align: center;
    }

    .custom-event-editor .e-textlabel {
        padding-right: 15px;
        text-align: right;
    }

    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }

    .treeview-external-drag #waiting {
        height: 100%;
        padding: 0;
    }

    .treeview-external-drag #waitdetails {
        width: 95%;
        float: left;
        height: 100%;
        padding: 0;
    }

    .treeview-external-drag #waitlist {
        width: 100%;
        height: 50%;
        font-weight: bold;
        font-family: "Segoe UI";
        font-size: 12px;
        padding: 5px 0 0 10px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .treeview-external-drag #ordernumber {
        height: 50%;
        font-family: "Segoe UI";
        font-size: 10px;
        opacity: 0.6;
        padding-left: 10px;
        padding-top: 5px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .treeview-external-drag .e-list-text,
    .e-bigger .treeview-external-drag .e-list-text {
        border: 0.5px solid #E1E7EC;
        height: 50px;
        line-height: 15px;
        padding: 0 5px;
        width: 220px;
    }

    .treeview-external-drag .e-list-parent,
    .e-bigger .treeview-external-drag .e-list-parent {
        height: 100%;
        padding: 0 2px;
    }

    .treeview-external-drag .e-list-item,
    .e-bigger .treeview-external-drag .e-list-item {
        height: 100%;
        padding: 0 0 5px 0;
    }

    .treeview-external-drag .e-fullrow,
    .e-bigger .treeview-external-drag .e-fullrow {
        height: 55px;
    }

    .treeview-external-drag .e-list-item.e-hover > .e-fullrow,
    .treeview-external-drag .e-list-item.e-active > .e-fullrow,
    .treeview-external-drag .e-list-item.e-active.e-hover > .e-fullrow,
    .e-bigger .treeview-external-drag .e-list-item.e-hover > .e-fullrow,
    .e-bigger .treeview-external-drag .e-list-item.e-active > .e-fullrow,
    .e-bigger .treeview-external-drag .e-list-item.e-active.e-hover > .e-fullrow {
        background-color: transparent;
        border-color: transparent;
        box-shadow: none !important;
    }

    .treeview-external-drag .e-text-content,
    .e-bigger .treeview-external-drag .e-text-content {
        padding: 0;
    }

    .e-drag-item.e-treeview.treeview-external-drag,
    .e-bigger .e-drag-item.e-treeview.treeview-external-drag {
        padding: 0 !important;
    }

    .e-schedule.schedule-drag-drop .e-timeline-view .e-resource-left-td,
    .e-schedule.schedule-drag-drop .e-timeline-month-view .e-resource-left-td {
        width: 160px;
    }

    .e-schedule.schedule-drag-drop .e-resource-cells.e-parent-node .specialist-category {
        padding-left: 30px
    }

    .e-schedule.e-rtl.schedule-drag-drop .e-resource-cells.e-parent-node .specialist-category {
        padding-right: 30px
    }

    .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-category,
    .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-name {
        padding: 5px
    }

    .tailwind .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-category,
    .tailwind .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-name,
    .tailwind-dark .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-category,
    .tailwind-dark .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-name {
        padding: unset !important;
    }

    .e-schedule.schedule-drag-drop .e-resource-cells.e-parent-node .specialist-name {
        padding: 0 10px
    }

    .e-schedule.schedule-drag-drop .e-resource-cells.e-parent-node .template-wrap {
        padding: 3px 0px;
    }

    .e-schedule.schedule-drag-drop .e-resource-cells.e-child-node .specialist-category .specialist-image {
        width: 45px;
        height: 40px;
        float: left;
        border-radius: 50%;
        margin-right: 10px;
    }

    .e-schedule.schedule-drag-drop .specialist-name {
        font-size: 13px;
    }

    .e-schedule.schedule-drag-drop .specialist-designation {
        font-size: 10px;
    }

    .e-schedule-dialog .e-all-day-time-zone-row,
    .e-schedule-dialog .e-location-container,
    .e-bigger .e-schedule-dialog .e-all-day-time-zone-row,
    .e-bigger .e-schedule-dialog .e-location-container {
        display: none;
    }

    .e-schedule-dialog .e-subject-container,
    .e-bigger .e-schedule-dialog .e-subject-container {
        padding-right: 0;
        width: 100%;
    }

    .e-schedule-dialog.e-rtl .e-subject-container,
    .e-bigger .e-schedule-dialog.e-rtl .e-subject-container {
        padding-left: 0;
    }

    @@media (max-width: 550px) {


        .treeview-external-drag.e-treeview,
        .e-bigger .treeview-external-drag.e-treeview {
            width: 225px;
        }

            .e-bigger .treeview-external-drag.e-treeview.e-drag-item {
                position: relative !important;
            }
    }
</style>